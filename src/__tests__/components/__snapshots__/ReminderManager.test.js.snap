// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ReminderManager matches snapshot 1`] = `
<WithStyles(ReminderManager)
  classes={
    Object {
      "button": "button-class",
      "textField": "textfield-class",
    }
  }
  handleClose={[MockFunction]}
  isOpen={true}
>
  <ReminderManager
    classes={
      Object {
        "button": "ReminderManager-button-2 button-class",
        "container": "ReminderManager-container-1",
        "textField": "ReminderManager-textField-3 textfield-class",
      }
    }
    handleClose={[MockFunction]}
    isOpen={true}
    isUpdate={false}
    onCreate={[Function]}
    onUpdate={[Function]}
  >
    <WithStyles(ForwardRef(Dialog))
      aria-labelledby="create-reminder-dialog"
      onClose={[MockFunction]}
      open={true}
    >
      <ForwardRef(Dialog)
        aria-labelledby="create-reminder-dialog"
        classes={
          Object {
            "container": "MuiDialog-container",
            "paper": "MuiDialog-paper",
            "paperFullScreen": "MuiDialog-paperFullScreen",
            "paperFullWidth": "MuiDialog-paperFullWidth",
            "paperScrollBody": "MuiDialog-paperScrollBody",
            "paperScrollPaper": "MuiDialog-paperScrollPaper",
            "paperWidthFalse": "MuiDialog-paperWidthFalse",
            "paperWidthLg": "MuiDialog-paperWidthLg",
            "paperWidthMd": "MuiDialog-paperWidthMd",
            "paperWidthSm": "MuiDialog-paperWidthSm",
            "paperWidthXl": "MuiDialog-paperWidthXl",
            "paperWidthXs": "MuiDialog-paperWidthXs",
            "root": "MuiDialog-root",
            "scrollBody": "MuiDialog-scrollBody",
            "scrollPaper": "MuiDialog-scrollPaper",
          }
        }
        onClose={[MockFunction]}
        open={true}
      >
        <ForwardRef(Modal)
          BackdropComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "Naked": Object {
                "$$typeof": Symbol(react.forward_ref),
                "propTypes": Object {
                  "className": [Function],
                  "classes": [Function],
                  "invisible": [Function],
                  "open": [Function],
                  "transitionDuration": [Function],
                },
                "render": [Function],
              },
              "displayName": "WithStyles(ForwardRef(Backdrop))",
              "options": Object {
                "defaultTheme": Object {
                  "breakpoints": Object {
                    "between": [Function],
                    "down": [Function],
                    "keys": Array [
                      "xs",
                      "sm",
                      "md",
                      "lg",
                      "xl",
                    ],
                    "only": [Function],
                    "up": [Function],
                    "values": Object {
                      "lg": 1280,
                      "md": 960,
                      "sm": 600,
                      "xl": 1920,
                      "xs": 0,
                    },
                    "width": [Function],
                  },
                  "direction": "ltr",
                  "mixins": Object {
                    "gutters": [Function],
                    "toolbar": Object {
                      "@media (min-width:0px) and (orientation: landscape)": Object {
                        "minHeight": 48,
                      },
                      "@media (min-width:600px)": Object {
                        "minHeight": 64,
                      },
                      "minHeight": 56,
                    },
                  },
                  "overrides": Object {},
                  "palette": Object {
                    "action": Object {
                      "active": "rgba(0, 0, 0, 0.54)",
                      "disabled": "rgba(0, 0, 0, 0.26)",
                      "disabledBackground": "rgba(0, 0, 0, 0.12)",
                      "hover": "rgba(0, 0, 0, 0.08)",
                      "hoverOpacity": 0.08,
                      "selected": "rgba(0, 0, 0, 0.14)",
                    },
                    "augmentColor": [Function],
                    "background": Object {
                      "default": "#fafafa",
                      "paper": "#fff",
                    },
                    "common": Object {
                      "black": "#000",
                      "white": "#fff",
                    },
                    "contrastThreshold": 3,
                    "divider": "rgba(0, 0, 0, 0.12)",
                    "error": Object {
                      "contrastText": "#fff",
                      "dark": "#d32f2f",
                      "light": "#e57373",
                      "main": "#f44336",
                    },
                    "getContrastText": [Function],
                    "grey": Object {
                      "100": "#f5f5f5",
                      "200": "#eeeeee",
                      "300": "#e0e0e0",
                      "400": "#bdbdbd",
                      "50": "#fafafa",
                      "500": "#9e9e9e",
                      "600": "#757575",
                      "700": "#616161",
                      "800": "#424242",
                      "900": "#212121",
                      "A100": "#d5d5d5",
                      "A200": "#aaaaaa",
                      "A400": "#303030",
                      "A700": "#616161",
                    },
                    "primary": Object {
                      "contrastText": "#fff",
                      "dark": "#303f9f",
                      "light": "#7986cb",
                      "main": "#3f51b5",
                    },
                    "secondary": Object {
                      "contrastText": "#fff",
                      "dark": "#c51162",
                      "light": "#ff4081",
                      "main": "#f50057",
                    },
                    "text": Object {
                      "disabled": "rgba(0, 0, 0, 0.38)",
                      "hint": "rgba(0, 0, 0, 0.38)",
                      "primary": "rgba(0, 0, 0, 0.87)",
                      "secondary": "rgba(0, 0, 0, 0.54)",
                    },
                    "tonalOffset": 0.2,
                    "type": "light",
                  },
                  "props": Object {},
                  "shadows": Array [
                    "none",
                    "0px 1px 3px 0px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 2px 1px -1px rgba(0,0,0,0.12)",
                    "0px 1px 5px 0px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 3px 1px -2px rgba(0,0,0,0.12)",
                    "0px 1px 8px 0px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 3px 3px -2px rgba(0,0,0,0.12)",
                    "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
                    "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
                    "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
                    "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
                    "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
                    "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
                    "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
                    "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
                    "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
                    "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
                    "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
                    "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
                    "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
                    "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
                    "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
                    "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
                    "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
                    "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
                    "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
                    "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
                    "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
                  ],
                  "shape": Object {
                    "borderRadius": 4,
                  },
                  "spacing": [Function],
                  "transitions": Object {
                    "create": [Function],
                    "duration": Object {
                      "complex": 375,
                      "enteringScreen": 225,
                      "leavingScreen": 195,
                      "short": 250,
                      "shorter": 200,
                      "shortest": 150,
                      "standard": 300,
                    },
                    "easing": Object {
                      "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                      "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                      "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                      "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                    },
                    "getAutoHeightDuration": [Function],
                  },
                  "typography": Object {
                    "body1": Object {
                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                      "fontSize": "1rem",
                      "fontWeight": 400,
                      "letterSpacing": "0.00938em",
                      "lineHeight": 1.5,
                    },
                    "body2": Object {
                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                      "fontSize": "0.875rem",
                      "fontWeight": 400,
                      "letterSpacing": "0.01071em",
                      "lineHeight": 1.43,
                    },
                    "button": Object {
                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                      "fontSize": "0.875rem",
                      "fontWeight": 500,
                      "letterSpacing": "0.02857em",
                      "lineHeight": 1.75,
                      "textTransform": "uppercase",
                    },
                    "caption": Object {
                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                      "fontSize": "0.75rem",
                      "fontWeight": 400,
                      "letterSpacing": "0.03333em",
                      "lineHeight": 1.66,
                    },
                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                    "fontSize": 14,
                    "fontWeightBold": 700,
                    "fontWeightLight": 300,
                    "fontWeightMedium": 500,
                    "fontWeightRegular": 400,
                    "h1": Object {
                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                      "fontSize": "6rem",
                      "fontWeight": 300,
                      "letterSpacing": "-0.01562em",
                      "lineHeight": 1,
                    },
                    "h2": Object {
                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                      "fontSize": "3.75rem",
                      "fontWeight": 300,
                      "letterSpacing": "-0.00833em",
                      "lineHeight": 1,
                    },
                    "h3": Object {
                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                      "fontSize": "3rem",
                      "fontWeight": 400,
                      "letterSpacing": "0em",
                      "lineHeight": 1.04,
                    },
                    "h4": Object {
                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                      "fontSize": "2.125rem",
                      "fontWeight": 400,
                      "letterSpacing": "0.00735em",
                      "lineHeight": 1.17,
                    },
                    "h5": Object {
                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                      "fontSize": "1.5rem",
                      "fontWeight": 400,
                      "letterSpacing": "0em",
                      "lineHeight": 1.33,
                    },
                    "h6": Object {
                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                      "fontSize": "1.25rem",
                      "fontWeight": 500,
                      "letterSpacing": "0.0075em",
                      "lineHeight": 1.6,
                    },
                    "htmlFontSize": 16,
                    "overline": Object {
                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                      "fontSize": "0.75rem",
                      "fontWeight": 400,
                      "letterSpacing": "0.08333em",
                      "lineHeight": 2.66,
                      "textTransform": "uppercase",
                    },
                    "pxToRem": [Function],
                    "round": [Function],
                    "subtitle1": Object {
                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                      "fontSize": "1rem",
                      "fontWeight": 400,
                      "letterSpacing": "0.00938em",
                      "lineHeight": 1.75,
                    },
                    "subtitle2": Object {
                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                      "fontSize": "0.875rem",
                      "fontWeight": 500,
                      "letterSpacing": "0.00714em",
                      "lineHeight": 1.57,
                    },
                  },
                  "zIndex": Object {
                    "appBar": 1100,
                    "drawer": 1200,
                    "mobileStepper": 1000,
                    "modal": 1300,
                    "snackbar": 1400,
                    "tooltip": 1500,
                  },
                },
                "name": "MuiBackdrop",
              },
              "propTypes": Object {
                "classes": [Function],
                "innerRef": [Function],
              },
              "render": [Function],
              "useStyles": [Function],
            }
          }
          BackdropProps={
            Object {
              "transitionDuration": Object {
                "enter": 225,
                "exit": 195,
              },
            }
          }
          aria-labelledby="create-reminder-dialog"
          className="MuiDialog-root"
          closeAfterTransition={true}
          disableBackdropClick={false}
          disableEscapeKeyDown={false}
          onClose={[MockFunction]}
          open={true}
          role="dialog"
        >
          <ForwardRef(Portal)
            disablePortal={false}
            onRendered={[Function]}
          >
            <Portal
              containerInfo={
                <body
                  style="overflow: hidden; padding-right: 0px;"
                >
                  <div
                    aria-labelledby="create-reminder-dialog"
                    class="MuiDialog-root"
                    role="dialog"
                    style="position: fixed; z-index: 1300; right: 0px; bottom: 0px; top: 0px; left: 0px;"
                  >
                    <div
                      aria-hidden="true"
                      class="MuiBackdrop-root"
                      style="opacity: 1; webkit-transition: opacity 225ms cubic-bezier(0.4, 0, 0.2, 1) 0ms; transition: opacity 225ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;"
                    />
                    <div
                      data-test="sentinelStart"
                      tabindex="0"
                    />
                    <div
                      class="MuiDialog-container MuiDialog-scrollPaper"
                      role="document"
                      style="opacity: 1; webkit-transition: opacity 225ms cubic-bezier(0.4, 0, 0.2, 1) 0ms; transition: opacity 225ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;"
                      tabindex="-1"
                    >
                      <div
                        class="MuiPaper-root MuiPaper-elevation24 MuiDialog-paper MuiDialog-paperScrollPaper MuiDialog-paperWidthSm MuiPaper-rounded"
                      >
                        <div
                          class="MuiDialogTitle-root"
                          id="create-reminder-dialog"
                        >
                          <h6
                            class="MuiTypography-root MuiTypography-h6"
                          >
                            Create
                             Reminder
                          </h6>
                        </div>
                        <form
                          class="ReminderManager-container-1"
                        >
                          <div
                            class="MuiFormControl-root MuiTextField-root ReminderManager-textField-3 textfield-class MuiFormControl-fullWidth"
                          >
                            <label
                              class="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                              data-shrink="false"
                              for="reminder-text"
                            >
                              Reminder Text
                            </label>
                            <div
                              class="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-fullWidth MuiInput-fullWidth MuiInputBase-formControl MuiInput-formControl"
                            >
                              <input
                                aria-describedby="reminder-text-helper-text"
                                aria-invalid="false"
                                class="MuiInputBase-input MuiInput-input"
                                id="reminder-text"
                                type="text"
                                value=""
                              />
                            </div>
                            <p
                              class="MuiFormHelperText-root"
                              id="reminder-text-helper-text"
                            >
                              30 Chars Max.
                            </p>
                          </div>
                          <div
                            class="MuiFormControl-root MuiTextField-root ReminderManager-textField-3 textfield-class MuiFormControl-fullWidth"
                          >
                            <label
                              class="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink"
                              data-shrink="true"
                              for="reminder-time"
                            >
                              Reminder Time
                            </label>
                            <div
                              class="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-fullWidth MuiInput-fullWidth MuiInputBase-formControl MuiInput-formControl"
                            >
                              <input
                                aria-invalid="false"
                                class="MuiInputBase-input MuiInput-input"
                                id="reminder-time"
                                step="300"
                                type="time"
                                value=""
                              />
                            </div>
                          </div>
                          <button
                            class="MuiButtonBase-root MuiButton-root ReminderManager-button-2 button-class MuiButton-contained MuiButton-containedPrimary MuiButton-sizeSmall"
                            tabindex="0"
                            type="button"
                          >
                            <span
                              class="MuiButton-label"
                            >
                              Create
                            </span>
                            <span
                              class="MuiTouchRipple-root"
                            />
                          </button>
                          <button
                            class="MuiButtonBase-root MuiButton-root ReminderManager-button-2 button-class MuiButton-outlined MuiButton-outlinedSecondary MuiButton-sizeSmall"
                            tabindex="0"
                            type="button"
                          >
                            <span
                              class="MuiButton-label"
                            >
                              Cancel
                            </span>
                            <span
                              class="MuiTouchRipple-root"
                            />
                          </button>
                        </form>
                      </div>
                    </div>
                    <div
                      data-test="sentinelEnd"
                      tabindex="0"
                    />
                  </div>
                </body>
              }
            >
              <div
                aria-labelledby="create-reminder-dialog"
                className="MuiDialog-root"
                onKeyDown={[Function]}
                role="dialog"
                style={
                  Object {
                    "bottom": 0,
                    "left": 0,
                    "position": "fixed",
                    "right": 0,
                    "top": 0,
                    "zIndex": 1300,
                  }
                }
              >
                <WithStyles(ForwardRef(Backdrop))
                  onClick={[Function]}
                  open={true}
                  transitionDuration={
                    Object {
                      "enter": 225,
                      "exit": 195,
                    }
                  }
                >
                  <ForwardRef(Backdrop)
                    classes={
                      Object {
                        "invisible": "MuiBackdrop-invisible",
                        "root": "MuiBackdrop-root",
                      }
                    }
                    onClick={[Function]}
                    open={true}
                    transitionDuration={
                      Object {
                        "enter": 225,
                        "exit": 195,
                      }
                    }
                  >
                    <ForwardRef(Fade)
                      in={true}
                      onClick={[Function]}
                      timeout={
                        Object {
                          "enter": 225,
                          "exit": 195,
                        }
                      }
                    >
                      <Transition
                        appear={true}
                        enter={true}
                        exit={true}
                        in={true}
                        mountOnEnter={false}
                        onClick={[Function]}
                        onEnter={[Function]}
                        onEntered={[Function]}
                        onEntering={[Function]}
                        onExit={[Function]}
                        onExited={[Function]}
                        onExiting={[Function]}
                        timeout={
                          Object {
                            "enter": 225,
                            "exit": 195,
                          }
                        }
                        unmountOnExit={false}
                      >
                        <div
                          aria-hidden={true}
                          className="MuiBackdrop-root"
                          onClick={[Function]}
                          style={
                            Object {
                              "opacity": 1,
                              "visibility": undefined,
                            }
                          }
                        />
                      </Transition>
                    </ForwardRef(Fade)>
                  </ForwardRef(Backdrop)>
                </WithStyles(ForwardRef(Backdrop))>
                <TrapFocus
                  disableAutoFocus={false}
                  disableEnforceFocus={false}
                  disableRestoreFocus={false}
                  getDoc={[Function]}
                  isEnabled={[Function]}
                  open={true}
                >
                  <div
                    data-test="sentinelStart"
                    tabIndex={0}
                  />
                  <ForwardRef(Fade)
                    appear={true}
                    in={true}
                    onEnter={[Function]}
                    onExited={[Function]}
                    role="document"
                    tabIndex="-1"
                    timeout={
                      Object {
                        "enter": 225,
                        "exit": 195,
                      }
                    }
                  >
                    <Transition
                      appear={true}
                      enter={true}
                      exit={true}
                      in={true}
                      mountOnEnter={false}
                      onEnter={[Function]}
                      onEntered={[Function]}
                      onEntering={[Function]}
                      onExit={[Function]}
                      onExited={[Function]}
                      onExiting={[Function]}
                      role="document"
                      tabIndex="-1"
                      timeout={
                        Object {
                          "enter": 225,
                          "exit": 195,
                        }
                      }
                      unmountOnExit={false}
                    >
                      <div
                        className="MuiDialog-container MuiDialog-scrollPaper"
                        onClick={[Function]}
                        onMouseDown={[Function]}
                        role="document"
                        style={
                          Object {
                            "opacity": 1,
                            "visibility": undefined,
                          }
                        }
                        tabIndex="-1"
                      >
                        <WithStyles(ForwardRef(Paper))
                          className="MuiDialog-paper MuiDialog-paperScrollPaper MuiDialog-paperWidthSm"
                          elevation={24}
                        >
                          <ForwardRef(Paper)
                            className="MuiDialog-paper MuiDialog-paperScrollPaper MuiDialog-paperWidthSm"
                            classes={
                              Object {
                                "elevation0": "MuiPaper-elevation0",
                                "elevation1": "MuiPaper-elevation1",
                                "elevation10": "MuiPaper-elevation10",
                                "elevation11": "MuiPaper-elevation11",
                                "elevation12": "MuiPaper-elevation12",
                                "elevation13": "MuiPaper-elevation13",
                                "elevation14": "MuiPaper-elevation14",
                                "elevation15": "MuiPaper-elevation15",
                                "elevation16": "MuiPaper-elevation16",
                                "elevation17": "MuiPaper-elevation17",
                                "elevation18": "MuiPaper-elevation18",
                                "elevation19": "MuiPaper-elevation19",
                                "elevation2": "MuiPaper-elevation2",
                                "elevation20": "MuiPaper-elevation20",
                                "elevation21": "MuiPaper-elevation21",
                                "elevation22": "MuiPaper-elevation22",
                                "elevation23": "MuiPaper-elevation23",
                                "elevation24": "MuiPaper-elevation24",
                                "elevation3": "MuiPaper-elevation3",
                                "elevation4": "MuiPaper-elevation4",
                                "elevation5": "MuiPaper-elevation5",
                                "elevation6": "MuiPaper-elevation6",
                                "elevation7": "MuiPaper-elevation7",
                                "elevation8": "MuiPaper-elevation8",
                                "elevation9": "MuiPaper-elevation9",
                                "root": "MuiPaper-root",
                                "rounded": "MuiPaper-rounded",
                              }
                            }
                            elevation={24}
                          >
                            <div
                              className="MuiPaper-root MuiPaper-elevation24 MuiDialog-paper MuiDialog-paperScrollPaper MuiDialog-paperWidthSm MuiPaper-rounded"
                            >
                              <WithStyles(ForwardRef(DialogTitle))
                                id="create-reminder-dialog"
                              >
                                <ForwardRef(DialogTitle)
                                  classes={
                                    Object {
                                      "root": "MuiDialogTitle-root",
                                    }
                                  }
                                  id="create-reminder-dialog"
                                >
                                  <div
                                    className="MuiDialogTitle-root"
                                    id="create-reminder-dialog"
                                  >
                                    <WithStyles(ForwardRef(Typography))
                                      variant="h6"
                                    >
                                      <ForwardRef(Typography)
                                        classes={
                                          Object {
                                            "alignCenter": "MuiTypography-alignCenter",
                                            "alignJustify": "MuiTypography-alignJustify",
                                            "alignLeft": "MuiTypography-alignLeft",
                                            "alignRight": "MuiTypography-alignRight",
                                            "body1": "MuiTypography-body1",
                                            "body2": "MuiTypography-body2",
                                            "button": "MuiTypography-button",
                                            "caption": "MuiTypography-caption",
                                            "colorError": "MuiTypography-colorError",
                                            "colorInherit": "MuiTypography-colorInherit",
                                            "colorPrimary": "MuiTypography-colorPrimary",
                                            "colorSecondary": "MuiTypography-colorSecondary",
                                            "colorTextPrimary": "MuiTypography-colorTextPrimary",
                                            "colorTextSecondary": "MuiTypography-colorTextSecondary",
                                            "displayBlock": "MuiTypography-displayBlock",
                                            "displayInline": "MuiTypography-displayInline",
                                            "gutterBottom": "MuiTypography-gutterBottom",
                                            "h1": "MuiTypography-h1",
                                            "h2": "MuiTypography-h2",
                                            "h3": "MuiTypography-h3",
                                            "h4": "MuiTypography-h4",
                                            "h5": "MuiTypography-h5",
                                            "h6": "MuiTypography-h6",
                                            "noWrap": "MuiTypography-noWrap",
                                            "overline": "MuiTypography-overline",
                                            "paragraph": "MuiTypography-paragraph",
                                            "root": "MuiTypography-root",
                                            "srOnly": "MuiTypography-srOnly",
                                            "subtitle1": "MuiTypography-subtitle1",
                                            "subtitle2": "MuiTypography-subtitle2",
                                          }
                                        }
                                        theme={
                                          Object {
                                            "breakpoints": Object {
                                              "between": [Function],
                                              "down": [Function],
                                              "keys": Array [
                                                "xs",
                                                "sm",
                                                "md",
                                                "lg",
                                                "xl",
                                              ],
                                              "only": [Function],
                                              "up": [Function],
                                              "values": Object {
                                                "lg": 1280,
                                                "md": 960,
                                                "sm": 600,
                                                "xl": 1920,
                                                "xs": 0,
                                              },
                                              "width": [Function],
                                            },
                                            "direction": "ltr",
                                            "mixins": Object {
                                              "gutters": [Function],
                                              "toolbar": Object {
                                                "@media (min-width:0px) and (orientation: landscape)": Object {
                                                  "minHeight": 48,
                                                },
                                                "@media (min-width:600px)": Object {
                                                  "minHeight": 64,
                                                },
                                                "minHeight": 56,
                                              },
                                            },
                                            "overrides": Object {},
                                            "palette": Object {
                                              "action": Object {
                                                "active": "rgba(0, 0, 0, 0.54)",
                                                "disabled": "rgba(0, 0, 0, 0.26)",
                                                "disabledBackground": "rgba(0, 0, 0, 0.12)",
                                                "hover": "rgba(0, 0, 0, 0.08)",
                                                "hoverOpacity": 0.08,
                                                "selected": "rgba(0, 0, 0, 0.14)",
                                              },
                                              "augmentColor": [Function],
                                              "background": Object {
                                                "default": "#fafafa",
                                                "paper": "#fff",
                                              },
                                              "common": Object {
                                                "black": "#000",
                                                "white": "#fff",
                                              },
                                              "contrastThreshold": 3,
                                              "divider": "rgba(0, 0, 0, 0.12)",
                                              "error": Object {
                                                "contrastText": "#fff",
                                                "dark": "#d32f2f",
                                                "light": "#e57373",
                                                "main": "#f44336",
                                              },
                                              "getContrastText": [Function],
                                              "grey": Object {
                                                "100": "#f5f5f5",
                                                "200": "#eeeeee",
                                                "300": "#e0e0e0",
                                                "400": "#bdbdbd",
                                                "50": "#fafafa",
                                                "500": "#9e9e9e",
                                                "600": "#757575",
                                                "700": "#616161",
                                                "800": "#424242",
                                                "900": "#212121",
                                                "A100": "#d5d5d5",
                                                "A200": "#aaaaaa",
                                                "A400": "#303030",
                                                "A700": "#616161",
                                              },
                                              "primary": Object {
                                                "contrastText": "#fff",
                                                "dark": "#303f9f",
                                                "light": "#7986cb",
                                                "main": "#3f51b5",
                                              },
                                              "secondary": Object {
                                                "contrastText": "#fff",
                                                "dark": "#c51162",
                                                "light": "#ff4081",
                                                "main": "#f50057",
                                              },
                                              "text": Object {
                                                "disabled": "rgba(0, 0, 0, 0.38)",
                                                "hint": "rgba(0, 0, 0, 0.38)",
                                                "primary": "rgba(0, 0, 0, 0.87)",
                                                "secondary": "rgba(0, 0, 0, 0.54)",
                                              },
                                              "tonalOffset": 0.2,
                                              "type": "light",
                                            },
                                            "props": Object {},
                                            "shadows": Array [
                                              "none",
                                              "0px 1px 3px 0px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 2px 1px -1px rgba(0,0,0,0.12)",
                                              "0px 1px 5px 0px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 3px 1px -2px rgba(0,0,0,0.12)",
                                              "0px 1px 8px 0px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 3px 3px -2px rgba(0,0,0,0.12)",
                                              "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
                                              "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
                                              "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
                                              "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
                                              "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
                                              "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
                                              "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
                                              "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
                                              "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
                                              "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
                                              "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
                                              "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
                                              "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
                                              "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
                                              "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
                                              "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
                                              "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
                                              "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
                                              "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
                                              "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
                                              "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
                                            ],
                                            "shape": Object {
                                              "borderRadius": 4,
                                            },
                                            "spacing": [Function],
                                            "transitions": Object {
                                              "create": [Function],
                                              "duration": Object {
                                                "complex": 375,
                                                "enteringScreen": 225,
                                                "leavingScreen": 195,
                                                "short": 250,
                                                "shorter": 200,
                                                "shortest": 150,
                                                "standard": 300,
                                              },
                                              "easing": Object {
                                                "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                                                "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                                                "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                                                "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                                              },
                                              "getAutoHeightDuration": [Function],
                                            },
                                            "typography": Object {
                                              "body1": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "1rem",
                                                "fontWeight": 400,
                                                "letterSpacing": "0.00938em",
                                                "lineHeight": 1.5,
                                              },
                                              "body2": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "0.875rem",
                                                "fontWeight": 400,
                                                "letterSpacing": "0.01071em",
                                                "lineHeight": 1.43,
                                              },
                                              "button": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "0.875rem",
                                                "fontWeight": 500,
                                                "letterSpacing": "0.02857em",
                                                "lineHeight": 1.75,
                                                "textTransform": "uppercase",
                                              },
                                              "caption": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "0.75rem",
                                                "fontWeight": 400,
                                                "letterSpacing": "0.03333em",
                                                "lineHeight": 1.66,
                                              },
                                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                              "fontSize": 14,
                                              "fontWeightBold": 700,
                                              "fontWeightLight": 300,
                                              "fontWeightMedium": 500,
                                              "fontWeightRegular": 400,
                                              "h1": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "6rem",
                                                "fontWeight": 300,
                                                "letterSpacing": "-0.01562em",
                                                "lineHeight": 1,
                                              },
                                              "h2": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "3.75rem",
                                                "fontWeight": 300,
                                                "letterSpacing": "-0.00833em",
                                                "lineHeight": 1,
                                              },
                                              "h3": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "3rem",
                                                "fontWeight": 400,
                                                "letterSpacing": "0em",
                                                "lineHeight": 1.04,
                                              },
                                              "h4": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "2.125rem",
                                                "fontWeight": 400,
                                                "letterSpacing": "0.00735em",
                                                "lineHeight": 1.17,
                                              },
                                              "h5": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "1.5rem",
                                                "fontWeight": 400,
                                                "letterSpacing": "0em",
                                                "lineHeight": 1.33,
                                              },
                                              "h6": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "1.25rem",
                                                "fontWeight": 500,
                                                "letterSpacing": "0.0075em",
                                                "lineHeight": 1.6,
                                              },
                                              "htmlFontSize": 16,
                                              "overline": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "0.75rem",
                                                "fontWeight": 400,
                                                "letterSpacing": "0.08333em",
                                                "lineHeight": 2.66,
                                                "textTransform": "uppercase",
                                              },
                                              "pxToRem": [Function],
                                              "round": [Function],
                                              "subtitle1": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "1rem",
                                                "fontWeight": 400,
                                                "letterSpacing": "0.00938em",
                                                "lineHeight": 1.75,
                                              },
                                              "subtitle2": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "0.875rem",
                                                "fontWeight": 500,
                                                "letterSpacing": "0.00714em",
                                                "lineHeight": 1.57,
                                              },
                                            },
                                            "zIndex": Object {
                                              "appBar": 1100,
                                              "drawer": 1200,
                                              "mobileStepper": 1000,
                                              "modal": 1300,
                                              "snackbar": 1400,
                                              "tooltip": 1500,
                                            },
                                          }
                                        }
                                        variant="h6"
                                      >
                                        <h6
                                          className="MuiTypography-root MuiTypography-h6"
                                        >
                                          Create
                                           Reminder
                                        </h6>
                                      </ForwardRef(Typography)>
                                    </WithStyles(ForwardRef(Typography))>
                                  </div>
                                </ForwardRef(DialogTitle)>
                              </WithStyles(ForwardRef(DialogTitle))>
                              <form
                                className="ReminderManager-container-1"
                              >
                                <WithStyles(ForwardRef(TextField))
                                  className="ReminderManager-textField-3 textfield-class"
                                  fullWidth={true}
                                  helperText="30 Chars Max."
                                  id="reminder-text"
                                  label="Reminder Text"
                                  onChange={[Function]}
                                  value=""
                                >
                                  <ForwardRef(TextField)
                                    className="ReminderManager-textField-3 textfield-class"
                                    classes={
                                      Object {
                                        "root": "MuiTextField-root",
                                      }
                                    }
                                    fullWidth={true}
                                    helperText="30 Chars Max."
                                    id="reminder-text"
                                    label="Reminder Text"
                                    onChange={[Function]}
                                    value=""
                                  >
                                    <WithStyles(ForwardRef(FormControl))
                                      className="MuiTextField-root ReminderManager-textField-3 textfield-class"
                                      fullWidth={true}
                                      required={false}
                                      variant="standard"
                                    >
                                      <ForwardRef(FormControl)
                                        className="MuiTextField-root ReminderManager-textField-3 textfield-class"
                                        classes={
                                          Object {
                                            "fullWidth": "MuiFormControl-fullWidth",
                                            "marginDense": "MuiFormControl-marginDense",
                                            "marginNormal": "MuiFormControl-marginNormal",
                                            "root": "MuiFormControl-root",
                                          }
                                        }
                                        fullWidth={true}
                                        required={false}
                                        variant="standard"
                                      >
                                        <div
                                          className="MuiFormControl-root MuiTextField-root ReminderManager-textField-3 textfield-class MuiFormControl-fullWidth"
                                        >
                                          <WithStyles(WithFormControlContext(ForwardRef(InputLabel)))
                                            htmlFor="reminder-text"
                                          >
                                            <WithFormControlContext(ForwardRef(InputLabel))
                                              classes={
                                                Object {
                                                  "animated": "MuiInputLabel-animated",
                                                  "asterisk": "MuiInputLabel-asterisk",
                                                  "disabled": "Mui-disabled",
                                                  "error": "Mui-error",
                                                  "filled": "MuiInputLabel-filled",
                                                  "focused": "Mui-focused",
                                                  "formControl": "MuiInputLabel-formControl",
                                                  "marginDense": "MuiInputLabel-marginDense",
                                                  "outlined": "MuiInputLabel-outlined",
                                                  "required": "Mui-required",
                                                  "root": "MuiInputLabel-root",
                                                  "shrink": "MuiInputLabel-shrink",
                                                }
                                              }
                                              htmlFor="reminder-text"
                                            >
                                              <ForwardRef(InputLabel)
                                                classes={
                                                  Object {
                                                    "animated": "MuiInputLabel-animated",
                                                    "asterisk": "MuiInputLabel-asterisk",
                                                    "disabled": "Mui-disabled",
                                                    "error": "Mui-error",
                                                    "filled": "MuiInputLabel-filled",
                                                    "focused": "Mui-focused",
                                                    "formControl": "MuiInputLabel-formControl",
                                                    "marginDense": "MuiInputLabel-marginDense",
                                                    "outlined": "MuiInputLabel-outlined",
                                                    "required": "Mui-required",
                                                    "root": "MuiInputLabel-root",
                                                    "shrink": "MuiInputLabel-shrink",
                                                  }
                                                }
                                                htmlFor="reminder-text"
                                                muiFormControl={
                                                  Object {
                                                    "adornedStart": false,
                                                    "disabled": false,
                                                    "error": false,
                                                    "filled": false,
                                                    "focused": false,
                                                    "margin": "none",
                                                    "onBlur": [Function],
                                                    "onEmpty": [Function],
                                                    "onFilled": [Function],
                                                    "onFocus": [Function],
                                                    "required": false,
                                                    "variant": "standard",
                                                  }
                                                }
                                              >
                                                <WithStyles(WithFormControlContext(ForwardRef(FormLabel)))
                                                  className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                                                  classes={
                                                    Object {
                                                      "asterisk": "MuiInputLabel-asterisk",
                                                      "disabled": "Mui-disabled",
                                                      "error": "Mui-error",
                                                      "focused": "Mui-focused",
                                                      "required": "Mui-required",
                                                    }
                                                  }
                                                  data-shrink={false}
                                                  htmlFor="reminder-text"
                                                >
                                                  <WithFormControlContext(ForwardRef(FormLabel))
                                                    className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                                                    classes={
                                                      Object {
                                                        "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                                                        "disabled": "Mui-disabled Mui-disabled",
                                                        "error": "Mui-error Mui-error",
                                                        "filled": "MuiFormLabel-filled",
                                                        "focused": "Mui-focused Mui-focused",
                                                        "required": "Mui-required Mui-required",
                                                        "root": "MuiFormLabel-root",
                                                      }
                                                    }
                                                    data-shrink={false}
                                                    htmlFor="reminder-text"
                                                  >
                                                    <ForwardRef(FormLabel)
                                                      className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                                                      classes={
                                                        Object {
                                                          "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                                                          "disabled": "Mui-disabled Mui-disabled",
                                                          "error": "Mui-error Mui-error",
                                                          "filled": "MuiFormLabel-filled",
                                                          "focused": "Mui-focused Mui-focused",
                                                          "required": "Mui-required Mui-required",
                                                          "root": "MuiFormLabel-root",
                                                        }
                                                      }
                                                      data-shrink={false}
                                                      htmlFor="reminder-text"
                                                      muiFormControl={
                                                        Object {
                                                          "adornedStart": false,
                                                          "disabled": false,
                                                          "error": false,
                                                          "filled": false,
                                                          "focused": false,
                                                          "margin": "none",
                                                          "onBlur": [Function],
                                                          "onEmpty": [Function],
                                                          "onFilled": [Function],
                                                          "onFocus": [Function],
                                                          "required": false,
                                                          "variant": "standard",
                                                        }
                                                      }
                                                    >
                                                      <label
                                                        className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                                                        data-shrink={false}
                                                        htmlFor="reminder-text"
                                                      >
                                                        Reminder Text
                                                      </label>
                                                    </ForwardRef(FormLabel)>
                                                  </WithFormControlContext(ForwardRef(FormLabel))>
                                                </WithStyles(WithFormControlContext(ForwardRef(FormLabel)))>
                                              </ForwardRef(InputLabel)>
                                            </WithFormControlContext(ForwardRef(InputLabel))>
                                          </WithStyles(WithFormControlContext(ForwardRef(InputLabel)))>
                                          <WithStyles(ForwardRef(Input))
                                            aria-describedby="reminder-text-helper-text"
                                            fullWidth={true}
                                            id="reminder-text"
                                            onChange={[Function]}
                                            value=""
                                          >
                                            <ForwardRef(Input)
                                              aria-describedby="reminder-text-helper-text"
                                              classes={
                                                Object {
                                                  "disabled": "Mui-disabled",
                                                  "error": "Mui-error",
                                                  "focused": "Mui-focused",
                                                  "formControl": "MuiInput-formControl",
                                                  "fullWidth": "MuiInput-fullWidth",
                                                  "input": "MuiInput-input",
                                                  "inputMarginDense": "MuiInput-inputMarginDense",
                                                  "inputMultiline": "MuiInput-inputMultiline",
                                                  "inputTypeSearch": "MuiInput-inputTypeSearch",
                                                  "multiline": "MuiInput-multiline",
                                                  "root": "MuiInput-root",
                                                  "underline": "MuiInput-underline",
                                                }
                                              }
                                              fullWidth={true}
                                              id="reminder-text"
                                              onChange={[Function]}
                                              value=""
                                            >
                                              <WithStyles(ForwardRef(InputBase))
                                                aria-describedby="reminder-text-helper-text"
                                                classes={
                                                  Object {
                                                    "disabled": "Mui-disabled",
                                                    "error": "Mui-error",
                                                    "focused": "Mui-focused",
                                                    "formControl": "MuiInput-formControl",
                                                    "fullWidth": "MuiInput-fullWidth",
                                                    "input": "MuiInput-input",
                                                    "inputMarginDense": "MuiInput-inputMarginDense",
                                                    "inputMultiline": "MuiInput-inputMultiline",
                                                    "inputTypeSearch": "MuiInput-inputTypeSearch",
                                                    "multiline": "MuiInput-multiline",
                                                    "root": "MuiInput-root MuiInput-underline",
                                                    "underline": null,
                                                  }
                                                }
                                                fullWidth={true}
                                                id="reminder-text"
                                                inputComponent="input"
                                                multiline={false}
                                                onChange={[Function]}
                                                type="text"
                                                value=""
                                              >
                                                <ForwardRef(InputBase)
                                                  aria-describedby="reminder-text-helper-text"
                                                  classes={
                                                    Object {
                                                      "adornedEnd": "MuiInputBase-adornedEnd",
                                                      "adornedStart": "MuiInputBase-adornedStart",
                                                      "disabled": "Mui-disabled Mui-disabled",
                                                      "error": "Mui-error Mui-error",
                                                      "focused": "Mui-focused Mui-focused",
                                                      "formControl": "MuiInputBase-formControl MuiInput-formControl",
                                                      "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                                                      "input": "MuiInputBase-input MuiInput-input",
                                                      "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                                                      "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                                                      "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                                                      "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                                                      "inputSelect": "MuiInputBase-inputSelect",
                                                      "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                                                      "marginDense": "MuiInputBase-marginDense",
                                                      "multiline": "MuiInputBase-multiline MuiInput-multiline",
                                                      "root": "MuiInputBase-root MuiInput-root MuiInput-underline",
                                                    }
                                                  }
                                                  fullWidth={true}
                                                  id="reminder-text"
                                                  inputComponent="input"
                                                  multiline={false}
                                                  onChange={[Function]}
                                                  type="text"
                                                  value=""
                                                >
                                                  <div
                                                    className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-fullWidth MuiInput-fullWidth MuiInputBase-formControl MuiInput-formControl"
                                                    onClick={[Function]}
                                                  >
                                                    <input
                                                      aria-describedby="reminder-text-helper-text"
                                                      aria-invalid={false}
                                                      className="MuiInputBase-input MuiInput-input"
                                                      disabled={false}
                                                      id="reminder-text"
                                                      onBlur={[Function]}
                                                      onChange={[Function]}
                                                      onFocus={[Function]}
                                                      required={false}
                                                      type="text"
                                                      value=""
                                                    />
                                                  </div>
                                                </ForwardRef(InputBase)>
                                              </WithStyles(ForwardRef(InputBase))>
                                            </ForwardRef(Input)>
                                          </WithStyles(ForwardRef(Input))>
                                          <WithStyles(WithFormControlContext(ForwardRef(FormHelperText)))
                                            id="reminder-text-helper-text"
                                          >
                                            <WithFormControlContext(ForwardRef(FormHelperText))
                                              classes={
                                                Object {
                                                  "contained": "MuiFormHelperText-contained",
                                                  "disabled": "Mui-disabled",
                                                  "error": "Mui-error",
                                                  "filled": "MuiFormHelperText-filled",
                                                  "focused": "Mui-focused",
                                                  "marginDense": "MuiFormHelperText-marginDense",
                                                  "required": "Mui-required",
                                                  "root": "MuiFormHelperText-root",
                                                }
                                              }
                                              id="reminder-text-helper-text"
                                            >
                                              <ForwardRef(FormHelperText)
                                                classes={
                                                  Object {
                                                    "contained": "MuiFormHelperText-contained",
                                                    "disabled": "Mui-disabled",
                                                    "error": "Mui-error",
                                                    "filled": "MuiFormHelperText-filled",
                                                    "focused": "Mui-focused",
                                                    "marginDense": "MuiFormHelperText-marginDense",
                                                    "required": "Mui-required",
                                                    "root": "MuiFormHelperText-root",
                                                  }
                                                }
                                                id="reminder-text-helper-text"
                                                muiFormControl={
                                                  Object {
                                                    "adornedStart": false,
                                                    "disabled": false,
                                                    "error": false,
                                                    "filled": false,
                                                    "focused": false,
                                                    "margin": "none",
                                                    "onBlur": [Function],
                                                    "onEmpty": [Function],
                                                    "onFilled": [Function],
                                                    "onFocus": [Function],
                                                    "required": false,
                                                    "variant": "standard",
                                                  }
                                                }
                                              >
                                                <p
                                                  className="MuiFormHelperText-root"
                                                  id="reminder-text-helper-text"
                                                >
                                                  30 Chars Max.
                                                </p>
                                              </ForwardRef(FormHelperText)>
                                            </WithFormControlContext(ForwardRef(FormHelperText))>
                                          </WithStyles(WithFormControlContext(ForwardRef(FormHelperText)))>
                                        </div>
                                      </ForwardRef(FormControl)>
                                    </WithStyles(ForwardRef(FormControl))>
                                  </ForwardRef(TextField)>
                                </WithStyles(ForwardRef(TextField))>
                                <WithStyles(ForwardRef(TextField))
                                  InputLabelProps={
                                    Object {
                                      "shrink": true,
                                    }
                                  }
                                  className="ReminderManager-textField-3 textfield-class"
                                  fullWidth={true}
                                  id="reminder-time"
                                  inputProps={
                                    Object {
                                      "step": 300,
                                    }
                                  }
                                  label="Reminder Time"
                                  onChange={[Function]}
                                  type="time"
                                  value=""
                                >
                                  <ForwardRef(TextField)
                                    InputLabelProps={
                                      Object {
                                        "shrink": true,
                                      }
                                    }
                                    className="ReminderManager-textField-3 textfield-class"
                                    classes={
                                      Object {
                                        "root": "MuiTextField-root",
                                      }
                                    }
                                    fullWidth={true}
                                    id="reminder-time"
                                    inputProps={
                                      Object {
                                        "step": 300,
                                      }
                                    }
                                    label="Reminder Time"
                                    onChange={[Function]}
                                    type="time"
                                    value=""
                                  >
                                    <WithStyles(ForwardRef(FormControl))
                                      className="MuiTextField-root ReminderManager-textField-3 textfield-class"
                                      fullWidth={true}
                                      required={false}
                                      variant="standard"
                                    >
                                      <ForwardRef(FormControl)
                                        className="MuiTextField-root ReminderManager-textField-3 textfield-class"
                                        classes={
                                          Object {
                                            "fullWidth": "MuiFormControl-fullWidth",
                                            "marginDense": "MuiFormControl-marginDense",
                                            "marginNormal": "MuiFormControl-marginNormal",
                                            "root": "MuiFormControl-root",
                                          }
                                        }
                                        fullWidth={true}
                                        required={false}
                                        variant="standard"
                                      >
                                        <div
                                          className="MuiFormControl-root MuiTextField-root ReminderManager-textField-3 textfield-class MuiFormControl-fullWidth"
                                        >
                                          <WithStyles(WithFormControlContext(ForwardRef(InputLabel)))
                                            htmlFor="reminder-time"
                                            shrink={true}
                                          >
                                            <WithFormControlContext(ForwardRef(InputLabel))
                                              classes={
                                                Object {
                                                  "animated": "MuiInputLabel-animated",
                                                  "asterisk": "MuiInputLabel-asterisk",
                                                  "disabled": "Mui-disabled",
                                                  "error": "Mui-error",
                                                  "filled": "MuiInputLabel-filled",
                                                  "focused": "Mui-focused",
                                                  "formControl": "MuiInputLabel-formControl",
                                                  "marginDense": "MuiInputLabel-marginDense",
                                                  "outlined": "MuiInputLabel-outlined",
                                                  "required": "Mui-required",
                                                  "root": "MuiInputLabel-root",
                                                  "shrink": "MuiInputLabel-shrink",
                                                }
                                              }
                                              htmlFor="reminder-time"
                                              shrink={true}
                                            >
                                              <ForwardRef(InputLabel)
                                                classes={
                                                  Object {
                                                    "animated": "MuiInputLabel-animated",
                                                    "asterisk": "MuiInputLabel-asterisk",
                                                    "disabled": "Mui-disabled",
                                                    "error": "Mui-error",
                                                    "filled": "MuiInputLabel-filled",
                                                    "focused": "Mui-focused",
                                                    "formControl": "MuiInputLabel-formControl",
                                                    "marginDense": "MuiInputLabel-marginDense",
                                                    "outlined": "MuiInputLabel-outlined",
                                                    "required": "Mui-required",
                                                    "root": "MuiInputLabel-root",
                                                    "shrink": "MuiInputLabel-shrink",
                                                  }
                                                }
                                                htmlFor="reminder-time"
                                                muiFormControl={
                                                  Object {
                                                    "adornedStart": false,
                                                    "disabled": false,
                                                    "error": false,
                                                    "filled": false,
                                                    "focused": false,
                                                    "margin": "none",
                                                    "onBlur": [Function],
                                                    "onEmpty": [Function],
                                                    "onFilled": [Function],
                                                    "onFocus": [Function],
                                                    "required": false,
                                                    "variant": "standard",
                                                  }
                                                }
                                                shrink={true}
                                              >
                                                <WithStyles(WithFormControlContext(ForwardRef(FormLabel)))
                                                  className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink"
                                                  classes={
                                                    Object {
                                                      "asterisk": "MuiInputLabel-asterisk",
                                                      "disabled": "Mui-disabled",
                                                      "error": "Mui-error",
                                                      "focused": "Mui-focused",
                                                      "required": "Mui-required",
                                                    }
                                                  }
                                                  data-shrink={true}
                                                  htmlFor="reminder-time"
                                                >
                                                  <WithFormControlContext(ForwardRef(FormLabel))
                                                    className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink"
                                                    classes={
                                                      Object {
                                                        "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                                                        "disabled": "Mui-disabled Mui-disabled",
                                                        "error": "Mui-error Mui-error",
                                                        "filled": "MuiFormLabel-filled",
                                                        "focused": "Mui-focused Mui-focused",
                                                        "required": "Mui-required Mui-required",
                                                        "root": "MuiFormLabel-root",
                                                      }
                                                    }
                                                    data-shrink={true}
                                                    htmlFor="reminder-time"
                                                  >
                                                    <ForwardRef(FormLabel)
                                                      className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink"
                                                      classes={
                                                        Object {
                                                          "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                                                          "disabled": "Mui-disabled Mui-disabled",
                                                          "error": "Mui-error Mui-error",
                                                          "filled": "MuiFormLabel-filled",
                                                          "focused": "Mui-focused Mui-focused",
                                                          "required": "Mui-required Mui-required",
                                                          "root": "MuiFormLabel-root",
                                                        }
                                                      }
                                                      data-shrink={true}
                                                      htmlFor="reminder-time"
                                                      muiFormControl={
                                                        Object {
                                                          "adornedStart": false,
                                                          "disabled": false,
                                                          "error": false,
                                                          "filled": false,
                                                          "focused": false,
                                                          "margin": "none",
                                                          "onBlur": [Function],
                                                          "onEmpty": [Function],
                                                          "onFilled": [Function],
                                                          "onFocus": [Function],
                                                          "required": false,
                                                          "variant": "standard",
                                                        }
                                                      }
                                                    >
                                                      <label
                                                        className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink"
                                                        data-shrink={true}
                                                        htmlFor="reminder-time"
                                                      >
                                                        Reminder Time
                                                      </label>
                                                    </ForwardRef(FormLabel)>
                                                  </WithFormControlContext(ForwardRef(FormLabel))>
                                                </WithStyles(WithFormControlContext(ForwardRef(FormLabel)))>
                                              </ForwardRef(InputLabel)>
                                            </WithFormControlContext(ForwardRef(InputLabel))>
                                          </WithStyles(WithFormControlContext(ForwardRef(InputLabel)))>
                                          <WithStyles(ForwardRef(Input))
                                            fullWidth={true}
                                            id="reminder-time"
                                            inputProps={
                                              Object {
                                                "step": 300,
                                              }
                                            }
                                            onChange={[Function]}
                                            type="time"
                                            value=""
                                          >
                                            <ForwardRef(Input)
                                              classes={
                                                Object {
                                                  "disabled": "Mui-disabled",
                                                  "error": "Mui-error",
                                                  "focused": "Mui-focused",
                                                  "formControl": "MuiInput-formControl",
                                                  "fullWidth": "MuiInput-fullWidth",
                                                  "input": "MuiInput-input",
                                                  "inputMarginDense": "MuiInput-inputMarginDense",
                                                  "inputMultiline": "MuiInput-inputMultiline",
                                                  "inputTypeSearch": "MuiInput-inputTypeSearch",
                                                  "multiline": "MuiInput-multiline",
                                                  "root": "MuiInput-root",
                                                  "underline": "MuiInput-underline",
                                                }
                                              }
                                              fullWidth={true}
                                              id="reminder-time"
                                              inputProps={
                                                Object {
                                                  "step": 300,
                                                }
                                              }
                                              onChange={[Function]}
                                              type="time"
                                              value=""
                                            >
                                              <WithStyles(ForwardRef(InputBase))
                                                classes={
                                                  Object {
                                                    "disabled": "Mui-disabled",
                                                    "error": "Mui-error",
                                                    "focused": "Mui-focused",
                                                    "formControl": "MuiInput-formControl",
                                                    "fullWidth": "MuiInput-fullWidth",
                                                    "input": "MuiInput-input",
                                                    "inputMarginDense": "MuiInput-inputMarginDense",
                                                    "inputMultiline": "MuiInput-inputMultiline",
                                                    "inputTypeSearch": "MuiInput-inputTypeSearch",
                                                    "multiline": "MuiInput-multiline",
                                                    "root": "MuiInput-root MuiInput-underline",
                                                    "underline": null,
                                                  }
                                                }
                                                fullWidth={true}
                                                id="reminder-time"
                                                inputComponent="input"
                                                inputProps={
                                                  Object {
                                                    "step": 300,
                                                  }
                                                }
                                                multiline={false}
                                                onChange={[Function]}
                                                type="time"
                                                value=""
                                              >
                                                <ForwardRef(InputBase)
                                                  classes={
                                                    Object {
                                                      "adornedEnd": "MuiInputBase-adornedEnd",
                                                      "adornedStart": "MuiInputBase-adornedStart",
                                                      "disabled": "Mui-disabled Mui-disabled",
                                                      "error": "Mui-error Mui-error",
                                                      "focused": "Mui-focused Mui-focused",
                                                      "formControl": "MuiInputBase-formControl MuiInput-formControl",
                                                      "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                                                      "input": "MuiInputBase-input MuiInput-input",
                                                      "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                                                      "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                                                      "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                                                      "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                                                      "inputSelect": "MuiInputBase-inputSelect",
                                                      "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                                                      "marginDense": "MuiInputBase-marginDense",
                                                      "multiline": "MuiInputBase-multiline MuiInput-multiline",
                                                      "root": "MuiInputBase-root MuiInput-root MuiInput-underline",
                                                    }
                                                  }
                                                  fullWidth={true}
                                                  id="reminder-time"
                                                  inputComponent="input"
                                                  inputProps={
                                                    Object {
                                                      "step": 300,
                                                    }
                                                  }
                                                  multiline={false}
                                                  onChange={[Function]}
                                                  type="time"
                                                  value=""
                                                >
                                                  <div
                                                    className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-fullWidth MuiInput-fullWidth MuiInputBase-formControl MuiInput-formControl"
                                                    onClick={[Function]}
                                                  >
                                                    <input
                                                      aria-invalid={false}
                                                      className="MuiInputBase-input MuiInput-input"
                                                      disabled={false}
                                                      id="reminder-time"
                                                      onBlur={[Function]}
                                                      onChange={[Function]}
                                                      onFocus={[Function]}
                                                      required={false}
                                                      step={300}
                                                      type="time"
                                                      value=""
                                                    />
                                                  </div>
                                                </ForwardRef(InputBase)>
                                              </WithStyles(ForwardRef(InputBase))>
                                            </ForwardRef(Input)>
                                          </WithStyles(ForwardRef(Input))>
                                        </div>
                                      </ForwardRef(FormControl)>
                                    </WithStyles(ForwardRef(FormControl))>
                                  </ForwardRef(TextField)>
                                </WithStyles(ForwardRef(TextField))>
                                <WithStyles(ForwardRef(Button))
                                  className="ReminderManager-button-2 button-class"
                                  color="primary"
                                  onClick={[Function]}
                                  size="small"
                                  variant="contained"
                                >
                                  <ForwardRef(Button)
                                    className="ReminderManager-button-2 button-class"
                                    classes={
                                      Object {
                                        "colorInherit": "MuiButton-colorInherit",
                                        "contained": "MuiButton-contained",
                                        "containedPrimary": "MuiButton-containedPrimary",
                                        "containedSecondary": "MuiButton-containedSecondary",
                                        "disabled": "Mui-disabled",
                                        "focusVisible": "Mui-focusVisible",
                                        "fullWidth": "MuiButton-fullWidth",
                                        "label": "MuiButton-label",
                                        "outlined": "MuiButton-outlined",
                                        "outlinedPrimary": "MuiButton-outlinedPrimary",
                                        "outlinedSecondary": "MuiButton-outlinedSecondary",
                                        "root": "MuiButton-root",
                                        "sizeLarge": "MuiButton-sizeLarge",
                                        "sizeSmall": "MuiButton-sizeSmall",
                                        "text": "MuiButton-text",
                                        "textPrimary": "MuiButton-textPrimary",
                                        "textSecondary": "MuiButton-textSecondary",
                                      }
                                    }
                                    color="primary"
                                    onClick={[Function]}
                                    size="small"
                                    variant="contained"
                                  >
                                    <WithStyles(ForwardRef(ButtonBase))
                                      className="MuiButton-root ReminderManager-button-2 button-class MuiButton-contained MuiButton-containedPrimary MuiButton-sizeSmall"
                                      component="button"
                                      disabled={false}
                                      focusRipple={true}
                                      focusVisibleClassName="Mui-focusVisible"
                                      onClick={[Function]}
                                      type="button"
                                    >
                                      <ForwardRef(ButtonBase)
                                        className="MuiButton-root ReminderManager-button-2 button-class MuiButton-contained MuiButton-containedPrimary MuiButton-sizeSmall"
                                        classes={
                                          Object {
                                            "disabled": "Mui-disabled",
                                            "focusVisible": "Mui-focusVisible",
                                            "root": "MuiButtonBase-root",
                                          }
                                        }
                                        component="button"
                                        disabled={false}
                                        focusRipple={true}
                                        focusVisibleClassName="Mui-focusVisible"
                                        onClick={[Function]}
                                        type="button"
                                      >
                                        <button
                                          className="MuiButtonBase-root MuiButton-root ReminderManager-button-2 button-class MuiButton-contained MuiButton-containedPrimary MuiButton-sizeSmall"
                                          disabled={false}
                                          onBlur={[Function]}
                                          onClick={[Function]}
                                          onDragLeave={[Function]}
                                          onFocus={[Function]}
                                          onKeyDown={[Function]}
                                          onKeyUp={[Function]}
                                          onMouseDown={[Function]}
                                          onMouseLeave={[Function]}
                                          onMouseUp={[Function]}
                                          onTouchEnd={[Function]}
                                          onTouchMove={[Function]}
                                          onTouchStart={[Function]}
                                          tabIndex={0}
                                          type="button"
                                        >
                                          <span
                                            className="MuiButton-label"
                                          >
                                            Create
                                          </span>
                                          <NoSsr>
                                            <WithStyles(TouchRipple)
                                              center={false}
                                            >
                                              <TouchRipple
                                                center={false}
                                                classes={
                                                  Object {
                                                    "child": "MuiTouchRipple-child",
                                                    "childLeaving": "MuiTouchRipple-childLeaving",
                                                    "childPulsate": "MuiTouchRipple-childPulsate",
                                                    "ripple": "MuiTouchRipple-ripple",
                                                    "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                    "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                    "root": "MuiTouchRipple-root",
                                                  }
                                                }
                                              >
                                                <span
                                                  className="MuiTouchRipple-root"
                                                >
                                                  <TransitionGroup
                                                    childFactory={[Function]}
                                                    component={null}
                                                    enter={true}
                                                    exit={true}
                                                  />
                                                </span>
                                              </TouchRipple>
                                            </WithStyles(TouchRipple)>
                                          </NoSsr>
                                        </button>
                                      </ForwardRef(ButtonBase)>
                                    </WithStyles(ForwardRef(ButtonBase))>
                                  </ForwardRef(Button)>
                                </WithStyles(ForwardRef(Button))>
                                <WithStyles(ForwardRef(Button))
                                  className="ReminderManager-button-2 button-class"
                                  color="secondary"
                                  onClick={[MockFunction]}
                                  size="small"
                                  variant="outlined"
                                >
                                  <ForwardRef(Button)
                                    className="ReminderManager-button-2 button-class"
                                    classes={
                                      Object {
                                        "colorInherit": "MuiButton-colorInherit",
                                        "contained": "MuiButton-contained",
                                        "containedPrimary": "MuiButton-containedPrimary",
                                        "containedSecondary": "MuiButton-containedSecondary",
                                        "disabled": "Mui-disabled",
                                        "focusVisible": "Mui-focusVisible",
                                        "fullWidth": "MuiButton-fullWidth",
                                        "label": "MuiButton-label",
                                        "outlined": "MuiButton-outlined",
                                        "outlinedPrimary": "MuiButton-outlinedPrimary",
                                        "outlinedSecondary": "MuiButton-outlinedSecondary",
                                        "root": "MuiButton-root",
                                        "sizeLarge": "MuiButton-sizeLarge",
                                        "sizeSmall": "MuiButton-sizeSmall",
                                        "text": "MuiButton-text",
                                        "textPrimary": "MuiButton-textPrimary",
                                        "textSecondary": "MuiButton-textSecondary",
                                      }
                                    }
                                    color="secondary"
                                    onClick={[MockFunction]}
                                    size="small"
                                    variant="outlined"
                                  >
                                    <WithStyles(ForwardRef(ButtonBase))
                                      className="MuiButton-root ReminderManager-button-2 button-class MuiButton-outlined MuiButton-outlinedSecondary MuiButton-sizeSmall"
                                      component="button"
                                      disabled={false}
                                      focusRipple={true}
                                      focusVisibleClassName="Mui-focusVisible"
                                      onClick={[MockFunction]}
                                      type="button"
                                    >
                                      <ForwardRef(ButtonBase)
                                        className="MuiButton-root ReminderManager-button-2 button-class MuiButton-outlined MuiButton-outlinedSecondary MuiButton-sizeSmall"
                                        classes={
                                          Object {
                                            "disabled": "Mui-disabled",
                                            "focusVisible": "Mui-focusVisible",
                                            "root": "MuiButtonBase-root",
                                          }
                                        }
                                        component="button"
                                        disabled={false}
                                        focusRipple={true}
                                        focusVisibleClassName="Mui-focusVisible"
                                        onClick={[MockFunction]}
                                        type="button"
                                      >
                                        <button
                                          className="MuiButtonBase-root MuiButton-root ReminderManager-button-2 button-class MuiButton-outlined MuiButton-outlinedSecondary MuiButton-sizeSmall"
                                          disabled={false}
                                          onBlur={[Function]}
                                          onClick={[MockFunction]}
                                          onDragLeave={[Function]}
                                          onFocus={[Function]}
                                          onKeyDown={[Function]}
                                          onKeyUp={[Function]}
                                          onMouseDown={[Function]}
                                          onMouseLeave={[Function]}
                                          onMouseUp={[Function]}
                                          onTouchEnd={[Function]}
                                          onTouchMove={[Function]}
                                          onTouchStart={[Function]}
                                          tabIndex={0}
                                          type="button"
                                        >
                                          <span
                                            className="MuiButton-label"
                                          >
                                            Cancel
                                          </span>
                                          <NoSsr>
                                            <WithStyles(TouchRipple)
                                              center={false}
                                            >
                                              <TouchRipple
                                                center={false}
                                                classes={
                                                  Object {
                                                    "child": "MuiTouchRipple-child",
                                                    "childLeaving": "MuiTouchRipple-childLeaving",
                                                    "childPulsate": "MuiTouchRipple-childPulsate",
                                                    "ripple": "MuiTouchRipple-ripple",
                                                    "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                    "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                    "root": "MuiTouchRipple-root",
                                                  }
                                                }
                                              >
                                                <span
                                                  className="MuiTouchRipple-root"
                                                >
                                                  <TransitionGroup
                                                    childFactory={[Function]}
                                                    component={null}
                                                    enter={true}
                                                    exit={true}
                                                  />
                                                </span>
                                              </TouchRipple>
                                            </WithStyles(TouchRipple)>
                                          </NoSsr>
                                        </button>
                                      </ForwardRef(ButtonBase)>
                                    </WithStyles(ForwardRef(ButtonBase))>
                                  </ForwardRef(Button)>
                                </WithStyles(ForwardRef(Button))>
                              </form>
                            </div>
                          </ForwardRef(Paper)>
                        </WithStyles(ForwardRef(Paper))>
                      </div>
                    </Transition>
                  </ForwardRef(Fade)>
                  <div
                    data-test="sentinelEnd"
                    tabIndex={0}
                  />
                </TrapFocus>
              </div>
            </Portal>
          </ForwardRef(Portal)>
        </ForwardRef(Modal)>
      </ForwardRef(Dialog)>
    </WithStyles(ForwardRef(Dialog))>
  </ReminderManager>
</WithStyles(ReminderManager)>
`;
